import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report, precision_recall_curve, auc
import matplotlib.pyplot as plt
from sklearn.metrics import PrecisionRecallDisplay
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import make_scorer, average_precision_score


# Load data
data = pd.read_excel('antifungal_less_than_DP25.xlsx')
X = data.drop(columns=['MIC_64'])
Y = data['MIC_64']


# Standardize data
sc = StandardScaler()
X_scaled = sc.fit_transform(X)
X_scaled = pd.DataFrame(X_scaled, columns = X.columns, index = X.index.values.tolist())
X = X_scaled.to_numpy()

# Split data
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.3, random_state=0, stratify= Y)

# Define classifiers and their parameters
classifiers = {
    'RandomForestClassifier_f1': {
        'model': RandomForestClassifier(random_state=0, n_estimators=4, min_samples_split=6, min_samples_leaf=7,
                                         max_features='log2', max_depth=7, criterion = 'log_loss',  class_weight='balanced', bootstrap=True),
        'X_train': X_train,
        'X_test': X_test
    },
    'SVC_f1': {
        'model': SVC(kernel='sigmoid', gamma=0.6819033346212207, class_weight='balanced', C=0.5757540299009418, random_state=0, probability=True),
        'X_train': X_train,
        'X_test': X_test
    },
    'LogisticRegression_f1': {
        'model': LogisticRegression(random_state=0, max_iter=323, class_weight='balanced', C=0.12466597430244464),
        'X_train': X_train,
        'X_test': X_test
    },
    'DecisionTreeClassifier_f1': {
        'model': DecisionTreeClassifier(random_state=0, min_samples_leaf=2, max_features='sqrt', max_depth=5, criterion='log_loss', class_weight='balanced',  splitter='best'),
        'X_train': X_train,
        'X_test': X_test
    },
    'AdaBoostClassifier_f1': {
        'model': AdaBoostClassifier(random_state=0, n_estimators=14, learning_rate = 0.305466545179521, algorithm='SAMME'),
        'X_train': X_train,
        'X_test': X_test
    },
    'GaussianNB_f1': {
        'model': GaussianNB(var_smoothing=0.13459335491310842),
        'X_train': X_train,
        'X_test': X_test
    },
    'KNeighborsClassifier_f1': {
        'model': KNeighborsClassifier(weights='uniform', p=3, n_neighbors=3, leaf_size=127, algorithm='kd_tree'),
        'X_train': X_train,
        'X_test': X_test
    },
}
# Train and evaluate classifiers
for clf_name, clf_data in classifiers.items():
    model = clf_data['model']
    model.fit(clf_data['X_train'], Y_train.values.ravel())
    Y_pred = model.predict(clf_data['X_test'])
    cm = confusion_matrix(Y_test, Y_pred)
    TN, FP, FN, TP = cm.ravel()
    print("True Positive: ", TP)
    print("True Negative: ", TN)
    print("False Positive: ", FP)
    print("False Negative: ", FN)
    report = classification_report(Y_test, Y_pred, target_names=["Bad", "Good"])
    print(f"{clf_name} Classification Report:")
    print(report)
    # Calculate precision-recall curve and AUC
    if hasattr(model, 'predict_proba'):
        y_prob = model.predict_proba(clf_data['X_test'])[:, 1]
        precision, recall, _ = precision_recall_curve(Y_test, y_prob)
        pr_auc = auc(recall, precision)
        plt.rcParams['font.family'] = 'Times New Roman'
        # Plot precision-recall curve
        plt.figure()
        plt.plot(recall, precision, marker='o', label=f'{clf_name} (PR AUC = {pr_auc:.2f})')
        plt.xlabel('Recall', fontsize=18)
        plt.ylabel('Precision', fontsize=18)
        plt.title(f'{clf_name} Precision-Recall Curve')
        plt.legend()
        plt.show()
        display = PrecisionRecallDisplay.from_estimator(model, X_test, Y_test, name=f"{clf_name}")
        _ = display.ax_.set_title("2-class Precision-Recall curve")
        print(model)
        print(f"PR AUC: {pr_auc}")

        plt.show()

